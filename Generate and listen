#@title Prototipo Completo
import mido
import numpy as np
import random
from mido import MidiFile, MidiTrack, Message
from midi2audio import FluidSynth
from IPython.display import Audio
import mido
import numpy as np
import random
from mido import MidiFile, MidiTrack, Message
from midi2audio import FluidSynth
from IPython.display import Audio

#@markdown Select a melody equation from the dropdown menu
Equation_melody = 'ikeda' #@param ["logistic",  "henon", "ikeda"]

#@markdown Select a rhythm equation from the dropdown menu
Equation_Rhythm = 'Strict_durations' #@param ["Strict_durations", "Regular_durations"]


Bpm = 120 #@param {type:"number"}
Composition_duration_in_seconds = 20 #@param {type:"number"}
start_note = 53 #@param ["40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"] {type:"raw"}

# Validate and adjust the length of the composition
if Composition_duration_in_seconds < 8:
    Composition_duration_in_seconds = 8
elif Composition_duration_in_seconds > 240:
    Composition_duration_in_seconds = 240

# Validate and adjust the BPM value
if Bpm < 40:
    Bpm = 40
elif Bpm > 400:
    Bpm = 400

# Rest of the code...

# Define the equations for the melody and rhythm
param1_options = {
    'logistic': lambda x: r * x * (1 - x),  # Logistic Map
    'henon': lambda x, y, a, b: 1 - a * x**2 + y * b,  # Henon Attractor
    'ikeda': lambda x, y, α, β: x + β - α / (1 + x**2 + y**2),  # Ikeda Map

}


param2_options = {
    'Strict_durations': [
        2.0, 1.5, 1.0, 0.75, 0.5],
    'Regular_durations': [
        4.0, 3.0, 2.0, 1.5, 1.0, 0.75, 0.5, 0.375]
}

beats_per_minute = Bpm
beats_per_second = beats_per_minute / 60
composition_duration_in_beats = beats_per_second * Composition_duration_in_seconds
iterations = int(composition_duration_in_beats)


# Set the equation functions based on user selection
melody_equation = param1_options[Equation_melody]
rhythm = random.choice(param2_options[Equation_Rhythm])
# Reset the calculations for note and time

for _ in range(iterations):
  r = random.uniform(2.4, 4.1)
  a = random.uniform(1.0, 2.1)
  b = random.uniform(0.0, 0.5)
  x = rhythm
  α = random.uniform(0.1, 1.0)
  β = random.uniform(0.0, 0.6)
  γ = random.uniform(0.1, 0.6)
  y = start_note

#resultado da melodia e processando isso.
melody_result = melody_equation(x, y, a, b)
processed_result = int(melody_equation(x, y, a, b))
end_value = abs(processed_result)
# conditions to simplification
if end_value > 100000:
    end_value = end_value // 10000
elif end_value > 10000 and end_value < 100000:
    end_value = end_value // 1000
elif end_value > 1000 and end_value < 10000:
    end_value = end_value // 100


# ... previous code ...

# Randomly determine if end_value should be positive or negative
is_positive = random.choice([True, False])
if not is_positive:
    end_value = -end_value

end_value = int(end_value)

# ... rest of the code ...


print(end_value)


# Rest of the code...

# Define a list to store the end values
end_values = []

# Define the equations for the melody and rhythm

# Rest of the code...

# Generate the composition
# Generate the composition
for i in range(int(Bpm * Composition_duration_in_seconds / 60)):
    # Calculate the melody and rhythm values
    if Equation_melody == 'logistic':
        melody = melody_equation(x)
    elif Equation_melody == 'henon':
        melody = melody_equation(x, y, a, b)
    elif Equation_melody == 'ikeda':
        melody = melody_equation(x, y, α, β)


    # Update the end values list
end_values.append(melody)

    # Rest of the code...

# Print all the end values
print("End Values:")
for value in end_values:
    print(value)
# Define the tempo (BPM)
tempo = Bpm

# Calculate the number of ticks per beat based on the tempo
ticks_per_beat = int(mido.bpm2tempo(tempo) / 1000)

# Define the output file path
output_file = 'melody.mid'

# Create a new MIDI file
mid = MidiFile()

# Define the track
track = MidiTrack()

# Iterate over each note in the matching_notes list
#for note_number in matching_notes:
    # Create a Note On message
 #   note_on = Message('note_on', note=note_number, velocity=64, time=0)

    # Create a Note Off message with the same note number
#    note_off = Message('note_off', note=note_number, velocity=64, time=int(ticks_per_beat))

# Iterate over each note in the matching_notes list

for note_number in matching_notes:
    duration = random.choice(param2_options[Equation_Rhythm])
    # Create a Note On message
    note_on = Message('note_on', note=note_number, velocity=64, time=0)

    # Create a Note Off message with the same note number and the correct duration
    note_off = Message('note_off', note=note_number, velocity=64, time=int(ticks_per_beat * duration))

    # Add the Note On and Note Off messages to the track
    track.append(note_on)
    track.append(note_off)

    # Add the Note On and Note Off messages to the track
    track.append(note_on)
    track.append(note_off)

# Save the MIDI file with the track
mid.tracks.append(track)
mid.save(output_file)

# Open the generated MIDI file
midi_file = mido.MidiFile(output_file)

# Print the MIDI messages in the file
for message in midi_file:
    print(message)

print("Ticks per beat:", ticks_per_beat)

# Convert MIDI to audio using FluidSynth
fs = FluidSynth("/usr/share/sounds/sf2/FluidR3_GM.sf2")
fs.midi_to_audio(output_file, 'melody.wav')

# Display the audio
display(Audio(filename='melody.wav', rate=44100))
